/*
 * Created on 24 Mar 2018 ( Time 12:23:31 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.trung.smallshop.service.impl;

import com.trung.smallshop.domain.dto.OrderDto;
import com.trung.smallshop.domain.entity.Order;
import com.trung.smallshop.repository.jpa.OrderJpaRepository;
import com.trung.smallshop.service.OrderService;
import com.trung.smallshop.service.mapping.OrderServiceMapper;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Implementation of OrderService
 */
@Component
@Transactional
public class OrderServiceImpl implements OrderService {

	@Resource
	private OrderJpaRepository orderJpaRepository;

	@Resource
	private OrderServiceMapper orderServiceMapper;
	
	@Override
	public OrderDto findById(Integer id) {
		Optional<Order> orderOptional = orderJpaRepository.findById(id);
		return orderServiceMapper.mapOrderToOrderDto(orderOptional.get());
	}

	@Override
	public List<OrderDto> findAll() {
		Iterable<Order> entities = orderJpaRepository.findAll();
		List<OrderDto> beans = new ArrayList<OrderDto>();
		for(Order order : entities) {
			beans.add(orderServiceMapper.mapOrderToOrderDto(order));
		}
		return beans;
	}

	@Override
	public OrderDto save(OrderDto orderDto) {
		return update(orderDto) ;
	}

	@Override
	public OrderDto create(OrderDto orderDto) {
		Optional<Order> orderOptional = orderJpaRepository.findById(orderDto.getId());
		Order order = orderOptional.get();
		if( order != null ) {
			throw new IllegalStateException("already.exists");
		}
		order = new Order();
		orderServiceMapper.mapOrderDtoToOrder(orderDto, order);
		Order orderSaved = orderJpaRepository.save(order);
		return orderServiceMapper.mapOrderToOrderDto(orderSaved);
	}

	@Override
	public OrderDto update(OrderDto orderDto) {
		Optional<Order> orderOptional = orderJpaRepository.findById(orderDto.getId());
		Order order = orderOptional.get();
		orderServiceMapper.mapOrderDtoToOrder(orderDto, order);
		Order orderSaved = orderJpaRepository.save(order);
		return orderServiceMapper.mapOrderToOrderDto(orderSaved);
	}

	@Override
	public void delete(Integer id) {
		orderJpaRepository.deleteById(id);
	}

	public OrderJpaRepository getOrderJpaRepository() {
		return orderJpaRepository;
	}

	public void setOrderJpaRepository(OrderJpaRepository orderJpaRepository) {
		this.orderJpaRepository = orderJpaRepository;
	}

	public OrderServiceMapper getOrderServiceMapper() {
		return orderServiceMapper;
	}

	public void setOrderServiceMapper(OrderServiceMapper orderServiceMapper) {
		this.orderServiceMapper = orderServiceMapper;
	}

}
