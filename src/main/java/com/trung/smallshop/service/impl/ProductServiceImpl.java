/*
 * Created on 24 Mar 2018 ( Time 12:23:31 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.trung.smallshop.service.impl;

import com.trung.smallshop.domain.dto.ProductDto;
import com.trung.smallshop.domain.entity.Product;
import com.trung.smallshop.repository.jpa.ProductJpaRepository;
import com.trung.smallshop.service.ProductService;
import com.trung.smallshop.service.mapping.ProductServiceMapper;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Implementation of ProductService
 */
@Component
@Transactional
public class ProductServiceImpl implements ProductService {

	@Resource
	private ProductJpaRepository productJpaRepository;

	@Resource
	private ProductServiceMapper productServiceMapper;
	
	@Override
	public ProductDto findById(Integer id) {
		Optional<Product> productOptional = productJpaRepository.findById(id);
		return productServiceMapper.mapProductToProductDto(productOptional.get());
	}

	@Override
	public List<ProductDto> findAll() {
		Iterable<Product> entities = productJpaRepository.findAll();
		List<ProductDto> beans = new ArrayList<ProductDto>();
		for(Product product : entities) {
			beans.add(productServiceMapper.mapProductToProductDto(product));
		}
		return beans;
	}

	@Override
	public ProductDto save(ProductDto productDto) {
		return update(productDto) ;
	}

	@Override
	public ProductDto create(ProductDto productDto) {
		Optional<Product> productOptional = productJpaRepository.findById(productDto.getId());
		Product product = productOptional.get();
		if( product != null ) {
			throw new IllegalStateException("already.exists");
		}
		product = new Product();
		productServiceMapper.mapProductDtoToProduct(productDto, product);
		Product productSaved = productJpaRepository.save(product);
		return productServiceMapper.mapProductToProductDto(productSaved);
	}

	@Override
	public ProductDto update(ProductDto productDto) {
		Optional<Product> productOptional = productJpaRepository.findById(productDto.getId());
		Product product = productOptional.get();
		productServiceMapper.mapProductDtoToProduct(productDto, product);
		Product productSaved = productJpaRepository.save(product);
		return productServiceMapper.mapProductToProductDto(productSaved);
	}

	@Override
	public void delete(Integer id) {
		productJpaRepository.deleteById(id);
	}

	public ProductJpaRepository getProductJpaRepository() {
		return productJpaRepository;
	}

	public void setProductJpaRepository(ProductJpaRepository productJpaRepository) {
		this.productJpaRepository = productJpaRepository;
	}

	public ProductServiceMapper getProductServiceMapper() {
		return productServiceMapper;
	}

	public void setProductServiceMapper(ProductServiceMapper productServiceMapper) {
		this.productServiceMapper = productServiceMapper;
	}

}
